// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

enum RequestedTrackStatus {
    ACCEPTED
    REJECTED
    PENDING
}

enum SubmissionStatus {
    ONGOING
    ENDED
    PAUSED
}

model Submission {
    id                 String           @id @default(cuid())
    createdAt          DateTime         @default(now())
    endsAt             DateTime?
    userId             String
    spotifyPlaylistId  String
    maxTrackLimit      Int?
    personRequestLimit Int?
    status             SubmissionStatus @default(ONGOING)
    requestedTracksId  RequestedTrack[]
}

model RequestedTrack {
    id            String               @id @default(cuid())
    createdAt     DateTime             @default(now())
    spotifyId     String
    submissionId  String
    submission    Submission           @relation(fields: [submissionId], references: [id], onDelete: Cascade)
    request_token String
    status        RequestedTrackStatus @default(PENDING)
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
